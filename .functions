# Create a new directory and enter it
function md() {
	mkdir -p "$@" && cd "$@"
}

# find shorthand
function f() {
	find . -name "$1" 2>&1 | grep -v 'Permission denied'
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
				cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')"
}

# Start an HTTP server from a directory, optionally specifying the port
function startserver() {
	local port="${1:-8000}"
	open "http://localhost:${port}/"
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Create a data URL from a file
function dataurl() {
				local mimeType=$(file -b --mime-type "$1")
				if [[ $mimeType == text/* ]]; then
								mimeType="${mimeType};charset=utf-8"
				fi
				echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}


# A better git clone
# clones a repository, cds into it, and opens it in my editor.
#
# Based on https://github.com/stephenplusplus/dots/blob/master/.bash_profile#L68 by @stephenplusplus
#
# Note: subl is already setup as a shortcut to Sublime. Replace with your own editor if different
# 
# - arg 1 - url|username|repo remote endpoint, username on github, or name of
#           repository.
# - arg 2 - (optional) name of repo
#
# usage:
#   $ clone things
#     .. git clone git@github.com:addyosmani/things.git things
#     .. cd things
#     .. subl .
#
#   $ clone yeoman generator
#     .. git clone git@github.com:yeoman/generator.git generator
#     .. cd generator
#     .. subl .
#
#   $ clone git@github.com:addyosmani/dotfiles.git
#     .. git clone git@github.com:addyosmani/dotfiles.git dotfiles
#     .. cd dots
#     .. subl .

function clone {
	# customize username to your own 
	local username="elad.chen"

	local url=$1;
	local repo=$2;

	if [[ ${url:0:4} == 'http' || ${url:0:3} == 'git' ]]
	then
		# just clone this thing.
		repo=$(echo $url | awk -F/ '{print $NF}' | sed -e 's/.git$//');
	elif [[ -z $repo ]]
	then
		# my own stuff.
		repo=$url;
		url="git@github.com:$username/$repo";
	else
		# not my own, but I know whose it is.
		url="git@github.com:$url/$repo.git";
	fi

	git clone $url $repo && cd $repo && subl .;
}

# git log with per-commit cmd-clickable GitHub URLs (iTerm)
function gf() {
	local remote="$(git remote -v | awk '/^origin.*\(push\)$/ {print $2}')"
	[[ "$remote" ]] || return
	local user_repo="$(echo "$remote" | perl -pe 's/.*://;s/\.git$//')"
	git log $* --name-status --color | awk "$(cat <<AWK
		/^.*commit [0-9a-f]{40}/ {sha=substr(\$2,1,7)}
		/^[MA]\t/ {printf "%s\thttps://github.com/$user_repo/blob/%s/%s\n", \$1, sha, \$2; next}
		/.*/ {print \$0}
AWK
	)" | less -F
}


# Copy w/ progress
function cp_p() {
	rsync -WavP --human-readable --progress $1 $2
}

# Test if HTTP compression (RFC 2616 + SDCH) is enabled for a given URL.
# Send a fake UA string for sites that sniff it instead of using the Accept-Encoding header. (Looking at you, ajax.googleapis.com!)
function httpcompression() {
	encoding="$(curl -LIs -H 'User-Agent: Mozilla/5 Gecko' -H 'Accept-Encoding: gzip,deflate,compress,sdch' "$1" | grep '^Content-Encoding:')" && echo "$1 is encoded using ${encoding#* }" || echo "$1 is not using any encoding"
}

# Syntax-highlight JSON strings or files
function json() {
	if [ -p /dev/stdin ]; then
		# piping, e.g. `echo '{"foo":42}' | json`
		python -mjson.tool | pygmentize -l javascript -f terminal256 -O style=monokai -g
	else
		# e.g. `json '{"foo":42}'`
		python -mjson.tool <<< "$*" | pygmentize -l javascript -f terminal256 -O style=monokai -g
	fi
}

function json_jq() {
	if [ -p /dev/stdin ]; then
		# piping, e.g. `echo '{"foo":42}' | json_jq`
		jq .
	else
		# e.g. `json '{"foo":42}'`
		jq . <<< "$*"
	fi
}

# prune a set of empty directories
function prunedir () { 
	 find $* -type d -empty -print0 | xargs -0r rmdir -p ; 
}

# get gzipped size
function gz() {
	echo "orig size    (bytes): "
	
	cat "$1" | wc -c
	
	echo "gzipped size (bytes): "
	
	gzip -c "$1" | wc -c
}

# Extract archives - use: extract <file>
# Based on http://dotfiles.org/~pseup/.bashrc
function extract() {
	if [ -f "$1" ] ; then
		local filename=$(basename "$1")
		local foldername="${filename%%.*}"
		local fullpath=`perl -e 'use Cwd "abs_path";print abs_path(shift)' "$1"`
		local didfolderexist=false
		if [ -d "$foldername" ]; then
			didfolderexist=true
			read -p "$foldername already exists, do you want to overwrite it? (y/n) " -n 1
			echo
			if [[ $REPLY =~ ^[Nn]$ ]]; then
				return
			fi
		fi
		mkdir -p "$foldername" && cd "$foldername"
		case $1 in
			*.tar.bz2) tar xjf "$fullpath" ;;
			*.tar.gz) tar xzf "$fullpath" ;;
			*.tar.xz) tar Jxvf "$fullpath" ;;
			*.tar.Z) tar xzf "$fullpath" ;;
			*.tar) tar xf "$fullpath" ;;
			*.taz) tar xzf "$fullpath" ;;
			*.tb2) tar xjf "$fullpath" ;;
			*.tbz) tar xjf "$fullpath" ;;
			*.tbz2) tar xjf "$fullpath" ;;
			*.tgz) tar xzf "$fullpath" ;;
			*.txz) tar Jxvf "$fullpath" ;;
			*.zip) unzip "$fullpath" ;;
			*) echo "'$1' cannot be extracted via extract()" && cd .. && ! $didfolderexist && rm -r "$foldername" ;;
		esac
	else
		echo "'$1' is not a valid file"
	fi
}

# Note: shells must be listed in /etc/shells
# Usage:
# `shell /usr/local/bin/bash`
# `shell /usr/local/bin/zsh`
function shell() {
	chsh -s $1
}

function whois() {
	local domain=$(echo "$1" | awk -F/ '{print $3}') # get domain from URL
	
	if [ -z $domain ] ; then
		domain=$1
	fi
	
	echo "Getting whois record for: $domain …"

	# avoid recursion
	# this is the best whois server
	# strip extra fluff
	/usr/bin/whois -h whois.internic.net $domain | sed '/NOTICE:/q'
}

# All the dig info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer
}

# Add note to Notes.app (OS X 10.8)
# Usage: `note 'title' 'body'` or `echo 'body' | note`
# Title is optional
function note() {
	local title
	local body
	
	if [ -t 0 ]; then
		title="$1"
		body="$2"
	else
		title=$(cat)
	fi

	osascript >/dev/null <<-EOF
		tell application "Notes"
			tell account "iCloud"
				tell folder "Notes"
					make new note with properties {name:"$title", body:"$title" & "<br><br>" & "$body"}
				end tell
			end tell
		end tell
	EOF
}

# Add reminder to Reminders.app (OS X 10.8)
# Usage: `remind 'foo'` or `echo 'foo' | remind`
function remind() {
	local text
	
	if [ -t 0 ]; then
		text="$1" # argument
	else
		text=$(cat) # pipe
	fi

	osascript >/dev/null <<-EOF
		tell application "Reminders"
			tell the default list
				make new reminder with properties {name:"$text"}
			end tell
		end tell
	EOF
}

# Launch installed browsers for a specific URL
# Usage: browsers "http://www.google.com"
function browsers() {
	chrome $1
	opera $1
	firefox $1
	safari $1 
}

# Browserstack shortcuts, now with added hotness thanks to the Browserstack team.
# Note, a trial or paid for account is needed for this to work
# Usage: ipad3 "http://www.google.com", win7ie8 "http://www.google.com" etc.

# For local server running on port 3000, use like this
# Usage: ipad3 "http://localhost:3000" "localhost,3000,0", win7ie8 "http://localhost:3000" "localhost,3000,0" etc.

# For local server running on apache with ssl as staging.example.com and https://staging.example.com 
# Usage: ipad3 "http://staging.example.com" "staging.example.com,80,0,staging.example.com,443,1", win7ie8 "http://staging.example.com" "staging.example.com,80,0,staging.example.com,443,1" etc.

function androidnexus() {
	local url="http://www.browserstack.com/start#os=android&os_version=4.0.3&device=Samsung+Galaxy+Nexus&zoom_to_fit=true&url=$1&start=true"
	openurl $url $2
}

function ipad3() {
	local url="http://www.browserstack.com/start#os=ios&os_version=5.1&device=iPad+3rd&zoom_to_fit=true&resolution=1024x768&speed=1&url=$1&start=true"
	openurl $url $2
}

function ipad3ios6() {
	local url="http://www.browserstack.com/start#os=ios&os_version=6.1&device=iPad+3rd&zoom_to_fit=true&resolution=1024x768&speed=1&url=$1&start=true"
	openurl $url $2
}

function ipad2() {
	local url="http://www.browserstack.com/start#os=ios&os_version=5.1&device=iPad+2nd&zoom_to_fit=true&resolution=1024x768&speed=1&url=$1&start=true"
	openurl $url $2
}

function win7ie8() {
	local url="http://www.browserstack.com/start#os=Windows&os_version=7&browser=IE&browser_version=8.0&zoom_to_fit=true&resolution=1024x768&speed=1&url=$1&start=true"
	openurl $url $2
}

function win7ie9() {
	local url="http://www.browserstack.com/start#os=Windows&os_version=7&browser=IE&browser_version=9.0&zoom_to_fit=true&resolution=1024x768&speed=1&url=$1&start=true"
	openurl $url $2
}

function win8ie10() {
	local url="http://www.browserstack.com/start#os=Windows&os_version=8&browser=IE&browser_version=10.0&zoom_to_fit=true&resolution=1024x768&speed=1&url=$1&start=true"
	openurl $url $2
}

function winxpie8() {
	local url="http://www.browserstack.com/start#os=Windows&os_version=XP&browser=IE&browser_version=8.0&zoom_to_fit=true&resolution=1024x768&speed=1&url=$1&start=true"
	openurl $url $2
}

function winxpie7() {
	local url="http://www.browserstack.com/start#os=Windows&os_version=XP&browser=IE&browser_version=7.0&zoom_to_fit=true&resolution=1024x768&speed=1&url=$1&start=true"
	openurl $url $2
}

function winxpie6() {
	local url="http://www.browserstack.com/start#os=Windows&os_version=XP&browser=IE&browser_version=6.0&zoom_to_fit=true&resolution=1024x768&speed=1&url=$1&start=true"
	openurl $url $2
}

function win7chrome() {
	local url="http://www.browserstack.com/start#os=Windows&os_version=7&browser=Chrome&browser_version=21.0&zoom_to_fit=true&resolution=1024x768&speed=1&url=$1&start=true"
	openurl $url $2
}

function win7ff() {
	local url="http://www.browserstack.com/start#os=Windows&os_version=7&browser=Firefox&browser_version=16.0&zoom_to_fit=true&resolution=1024x768&speed=1&url=$1&start=true"
	openurl $url $2
}

# take this repo and copy it to somewhere else minus the .git stuff.
function git-repo-export() {
	mkdir -p "$1"
	
	git archive master | tar -x -C "$1"
}

# GitHub URL for current repo.
function git-repo-url() {
	local remotename="${@:-origin}"
	local remote="$(git remote -v | awk '/^'"$remotename"'.*\(push\)$/ {print $2}')"
	[[ "$remote" ]] || return
	local user_repo="$(echo "$remote" | perl -pe 's/.*://;s/\.git$//')"
	echo "https://github.com/$user_repo"
}

# open all changed files (that still actually exist) in the editor
# credit: @cowboy
function git-open-changed-files() {
	local files=()
	for f in $(git diff --name-only "$@"); do
		[[ -e "$f" ]] && files=("${files[@]}" "$f")
	done
	local n=${#files[@]}
	echo "Opening $n $([[ "$@" ]] || echo "modified ")file$([[ $n != 1 ]] && \
		echo s)${@:+ modified in }$@"
	q "${files[@]}"
}

# open last commit in GitHub, in the browser.
# credit: @cowboy
function git-open-last-commit() {
	local n="${@:-1}"
	n=$((n-1))
	open $(git log -n 1 --skip=$n --pretty=oneline | awk "{printf \"$(gurl)/commit/%s\", substr(\$1,1,7)}")
}

# Create a git.io short URL
# https://github.blog/2011-11-10-git-io-github-url-shortener/ (code is not supported anymore)
function gitio() {
	if [ -z "${1}" ]; then
		echo "Usage: gitio [URL]"
		return 1
	fi
	
	echo "\n🔗 Shorten URL $(curl -is https://git.io/ -F "url=${1}" | awk '/^Location:/ { print $2 }')"
}

# Checkout git branch (including remote branches), sorted by most recent commit, limit 30 last branches
function git-fuzzy-branch-checkout() {
  local branches branch
  branches=$(git for-each-ref --count=30 --sort=-committerdate refs/heads/ --format="%(refname:short)") &&
  branch=$(echo "$branches" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

# Checkout git commit
function git-fuzzy-commit-checkout() {
  local commits commit
  commits=$(git log --pretty=oneline --abbrev-commit --reverse) &&
  commit=$(echo "$commits" | fzf --tac +s +m -e) &&
  git checkout $(echo "$commit" | sed "s/ .*//")
}

# Need fixing (hash is not piped correctly)
function git-commit-fixup() {
  git log --graph --color=never --format="%h%d %s %cr" "$@" | fzf | cut -d ' ' -f 2 | xargs git commit --no-verify --fixup
}

if [ "${TERM_PROGRAM}" = "iTerm.app" ]; then
	function iterm2_set_user_var() {
      printf "\033]1337;SetUserVar=%s=%s\007" "$1" $(printf "%s" "$2" | base64 | tr -d '\n')
    }
fi
