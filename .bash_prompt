# @gf3’s Sexy Bash Prompt, inspired by “Extravagant Zsh Prompt”
# Shamelessly copied from https://github.com/gf3/dotfiles

if which thefuck > /dev/null; then
    eval "$(thefuck --alias)"
fi;

# Automatically trim directories at a given depth in the prompt (requires Bash 4.x)
PROMPT_DIRTRIM=3

if [[ -n "$ZSH_VERSION" ]]; then  # quit now if in zsh
    return 1 2> /dev/null || exit 1;
fi;

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
	export TERM=gnome-256color
elif infocmp xterm-256color >/dev/null 2>&1; then
	export TERM=xterm-256color
fi

set_prompts() {
	# Use 5 colors (based on the primary 8 colors) for the prompt
	local WHITE
	local BLUE
	local YELLOW
	local GREEN
	local MAGENTA

	local BOLD
	local RESET

	if tput setaf 1 &> /dev/null; then
		tput sgr0

		# https://unix.stackexchange.com/questions/269077/tput-setaf-color-table-how-to-determine-color-codes
		# Use the below to customize
		# for i in $(seq 0 $(tput colors) ) ; do tput setaf $i ; echo -n "██=$i " ; done ; echo ; tput op

		if [[ $(tput colors) -ge 256 ]] 2>/dev/null; then
			# 256 colors
			WHITE=$(tput setaf 255)
			BLUE=$(tput setaf 75)
			YELLOW=$(tput setaf 172)
			GREEN=$(tput setaf 190)
			MAGENTA=$(tput setaf 204)
		else
			# 8 colors
			WHITE=$(tput setaf 7)
			BLUE=$(tput setaf 4)
			YELLOW=$(tput setaf 3)
			GREEN=$(tput setaf 2)
			MAGENTA=$(tput setaf 1)
		fi

		BOLD=$(tput bold)
		RESET=$(tput sgr0)
	else
		# https://misc.flogisoft.com/bash/tip_colors_and_formatting
		WHITE="\033[1;97m"
		BLUE="\033[1;34m"
		YELLOW="\033[1;33m"
		GREEN="\033[1;32m"
		MAGENTA="\033[1;35m"
		
		BOLD=""
		RESET="\033[m"
	fi

	function __parse_git_dirty() {
		[[ $(git status 2> /dev/null | tail -n1) != "nothing to commit (working directory clean)" ]] && echo "*"
	}

	# Print the branch name, and add an astrix if there are local 
	# Changes or empty string if it is not a git repo
	function __parse_git_branch() {
		git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/\1$(__parse_git_dirty)/"
	}

	# ------------------------------------------------------------------
	# | Prompt string                                                  |
	# ------------------------------------------------------------------
	# @source
	# https://raw.githubusercontent.com/paulirish/dotfiles/dd33151fcea1431706e4faabef5539f99c6ed379/.bash_prompt
	#
	# @see
	# https://unix.stackexchange.com/questions/193659/in-which-situations-are-ps2-ps3-ps4-used-as-the-prompt
	#
	# iTerm Tab and Title Customization and prompt customization
	# http://sage.ucsc.edu/xtal/iterm_tab_customization.html
	#
	# Put the string " [bash]   hostname::/full/directory/path"
	# in the title bar using the command sequence
	# \[\e]2;[bash]   \h::\]$PWD\[\a\]
	#
	# Put the penultimate and current directory
	# in the iterm tab
	# \[\e]1;\]$(basename $(dirname $PWD))/\W\[\a\]

	local TITLE="\[\e]1;\]\h @ \W\$PWD\[\a\]"
	local USERNAME="\[${BOLD}${BLUE}\]\u"
	local AT="\[$WHITE\]at"
	local HOST="\[$YELLOW\]\h"
	local in="\[$WHITE\]in"
	local WORK_DIR="\[$GREEN\]\w"
	local ON="\[$WHITE\]\$([[ -n \$(git branch 2> /dev/null) ]] && echo \"on\")"
	local BRANCH="\[$MAGENTA\]\$(__parse_git_branch)"

	PS1="$TITLE"
	PS1+="$USERNAME $AT $HOST $IN"
	PS1+="$WORK_DIR "
	PS1+="$ON $BRANCH"
	PS1+="\[$WHITE\]\n\$ "
	PS1+="\[$RESET\]"

	# ------------------------------------------------------------------
	# | Subshell prompt string                                         |
	# ------------------------------------------------------------------

	PS2="⚡ "

	# ------------------------------------------------------------------
	# | Debug prompt string  (when using `set -x`)                     |
	# ------------------------------------------------------------------
	#
	# When debugging a shell script via `set -x` this tricked-out prompt is used.
	#
	# The first character (+) is used and repeated for stack depth
	# Then, we log the current time, filename and line number, followed by function name, followed by actual source line

	PS4='+ \011\e[1;30m\t\011\e[1;34m${BASH_SOURCE}\e[0m:\e[1;36m${LINENO}\e[0m \011 ${FUNCNAME[0]:+\e[0;35m${FUNCNAME[0]}\e[1;30m()\e[0m:\011\011 }'

	# This could have been nice
	# unset -f __parse_git_dirty
	# unset -f __parse_git_branch

	return
}

set_prompts
unset set_prompts